//Develop a Java class with private integer and double data members, along with
methods for initialization, setting, and updating these members. Create two objects of
this class and invoke the necessary methods to modify the data. Use the Runtime class
to calculate the total allocated memory and memory occupied by the objects. Apply any
technique to make the objects unreachable, making them eligible for garbage
collection. Finally, recheck the utilized and total memory using the Runtime class.




public class SimpleMemoryDemo {
    private int intValue;
    private double doubleValue;

    // Method to initialize values
    public void initialize(int i, double d) {
        intValue = i;
        doubleValue = d;
    }

    // Method to update values
    public void update(int i, double d) {
        intValue = i;
        doubleValue = d;
    }

    // Method to display values
    public void display() {
        System.out.println("intValue: " + intValue + ", doubleValue: " + doubleValue);
    }

    public static void main(String[] args) {
        Runtime runtime = Runtime.getRuntime();

        // Memory before creating objects
        long before = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Used memory before objects: " + before);

        // Create and use two objects
        SimpleMemoryDemo obj1 = new SimpleMemoryDemo();
        obj1.initialize(10, 20.5);
        obj1.update(15, 25.5);
        obj1.display();

        SimpleMemoryDemo obj2 = new SimpleMemoryDemo();
        obj2.initialize(30, 40.5);
        obj2.update(35, 45.5);
        obj2.display();

        // Memory after using objects
        long after = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Used memory after objects: " + after);

        // Make objects eligible for garbage collection (L2: nullify references)
        obj1 = null;
        obj2 = null;

        // Request garbage collection
        System.out.println("Calling garbage collector...");
        System.gc();

        // Check memory again
        long finalMemory = runtime.totalMemory() - runtime.freeMemory();
        System.out.println("Used memory after GC request: " + finalMemory);
    }
}
